openapi: 3.0.0
info:
  description: API for managing users with CRUD operations
  title: User API
  version: 1.0.0
servers:
- url: http://localhost:8080/api/v1
paths:
  /users:
    get:
      operationId: getAllUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: A list of users
      summary: Get all users
      tags:
      - Users
      x-accepts:
      - application/json
      x-tags:
      - tag: Users
    post:
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User created successfully
      summary: Create a new user
      tags:
      - Users
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: Users
  /users/{id}:
    delete:
      operationId: deleteUser
      parameters:
      - description: ID of the user to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: User deleted successfully
      summary: Delete user by ID
      tags:
      - Users
      x-accepts:
      - application/json
      x-tags:
      - tag: Users
    get:
      operationId: getUserById
      parameters:
      - description: ID of the user to retrieve
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: A single user
        "404":
          description: User not found
      summary: Get user by ID
      tags:
      - Users
      x-accepts:
      - application/json
      x-tags:
      - tag: Users
    put:
      operationId: updateUser
      parameters:
      - description: ID of the user to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User updated successfully
      summary: Update user by ID
      tags:
      - Users
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: Users
components:
  schemas:
    User:
      example:
        name: John Doe
        id: 1
        email: test@example.com
      properties:
        id:
          example: 1
          type: integer
        email:
          example: test@example.com
          type: string
        name:
          example: John Doe
          type: string
      required:
      - email
      - name
      type: object
